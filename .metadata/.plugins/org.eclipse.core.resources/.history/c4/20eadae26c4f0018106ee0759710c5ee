package designpattern;

import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;

/*
 * 组合模式。是一个I并且包含很多I。多用来表示整体和部分的层次，形成树状关系。
 */
public class CompositePattern {
	public static void main(String[] args) {
		//(1+3)/(2+2)*100
		new OperatrionNode(, new DataNode(1), new DataNode(3))
		
		
		//? = (1+3)/(2+2)*100
	}
}

interface CalcNode {
	Object calc();
}

class DataNode implements CalcNode{
	
	private Object val;
	
	public DataNode(Object val) {
		this.val = val;
	}
	
	public void setVal(Object val) {
		this.val = val;
	}
	
	public Object getVal() {
		return this.val;
	}
	
	@Override
	public Object calc() {
		return this.val;
	}
}

class OperationNode implements CalcNode{
	
	private Operation operation;
	
	private CalcNode[] arguments;
	
	public OperationNode(Operation op, CalcNode...args) {
		this.operation = op;
		this.arguments = args;
	}
	
	@Override
	public Object calc() {
		return operation.Operate(this.arguments.stream().map(CalcNode::calc).collect(Collectors.toList()));
	}

}

interface Operation{
	Object Operate(Object...args);
}

class Expression implements CalcNode{
	
	private CalcNode rootNode;
	
	public Expression(CalcNode rn) {
		this.rootNode = rn;
	}

	@Override
	public Object calc() {
		return this.rootNode.calc();
	}
	
}

