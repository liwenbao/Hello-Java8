package designpattern;

import java.util.ArrayList;

/*
 * 组合模式。是一个I并且包含很多I。多用来表示整体和部分的层次，形成树状关系。
 */
public class CompositePattern {

}

interface CalcNode {
	Object calc();
}

class DataNode implements CalcNode{
	
	private Object val;
	
	public void setVal(Object val) {
		this.val = val;
	}
	
	@Override
	public Object calc() {
		return val;
	}
}

abstract class OperationNode implements CalcNode{
	
	private ArrayList<CalcNode> arguments;
	
	public void setArgs(CalcNode...args) {
		if (this.arguments == null)
			this.arguments = new ArrayList<CalcNode>();
		this.arguments = val;
	}
	
	@Override
	public Object calc() {
		return val;
	}
}

class Expression implements CalcNode{
	
	private ArrayList<CalcNode> nodes;

	@Override
	public Object calc() {
		// TODO Auto-generated method stub
		
	}
	
}

