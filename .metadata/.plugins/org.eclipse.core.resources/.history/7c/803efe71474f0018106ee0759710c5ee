package designpattern;

/*
 * 桥接模式
 */
public class BridgePattern {

}

/*
 * 数据访问器接口。可以通过实现该接口来支持新的数据访问形式，而不用关注公式语法和执行网络的实现形式。
 */
interface DataAccessor{
	void readData();
	void writeData();
}

/*
 * 公式语法接口。可以通过实现该接口来支持新的语法形式，而不用关注数据访问和执行网络的实现形式。
 */
interface FormulaSyntax{
	void Parse();
}

/*
 * 公式网络基类。通过数据访问接口桥接不同的数据访问实现。通过公式语法接口桥接不同的公式语法实现。
 * 以通过实现该类来支持新的公式网络组织形式，而不用关注数据访问和公式语法的实现形式。
 */
abstract class FormulaNet{
	protected DataAccessor dataAccess;
	protected FormulaSyntax formulaSyntax;
	abstract void Calc();
}

class TreeFormulaNet extends FormulaNet{

	@Override
	void Calc() {
		formulaSyntax.Parse();
		dataAccess.readData();
		System.out.println("Tree公式网络进行运行。");
		dataAccess.writeData();
	}
	
}

class ArrayFormulaNet extends FormulaNet{

	@Override
	void Calc() {
		formulaSyntax.Parse();
		dataAccess.readData();
		System.out.println("Array公式网络进行运行。");
		dataAccess.writeData();
	}
	
}

class DBDataAccessor implements DataAccessor{

	@Override
	public void readData() {
		System.out.println("DB数据访问器读取数据。");
	}

	@Override
	public void writeData() {
		System.out.println("DB数据访问器回写数据。");
	}
	
}

class FileDataAccessor implements DataAccessor{

	@Override
	public void readData() {
		System.out.println("File数据访问器读取数据。");
	}

	@Override
	public void writeData() {
		System.out.println("File数据访问器回写数据。");
	}
	
}

class JQFormulaSyntax implements FormulaSyntax{

	@Override
	public void Parse() {
		System.out.println("JQ语法解析公式。");
	}
	
}

class ExcelFormulaSyntax implements FormulaSyntax{

	@Override
	public void Parse() {
		System.out.println("Excel语法解析公式。");
	}
	
}
