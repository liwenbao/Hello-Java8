/*
 * 抽象工厂模式
 */
package designpattern;

public class AbstractFactoryPattern {

}

/*
 * Product A
 */
abstract class FileOperator{
	abstract void CreateFile(String path);
}

/*
 * Product A1
 */
class WindowsFileOperator extends FileOperator{

	@Override
	void CreateFile(String path) {
		System.out.println("create file in windows.");
	}
	
}

class UnixFileOperator extends FileOperator{

	@Override
	void CreateFile(String path) {
		System.out.println("create file in unix/linux.");
	}
	
}

/*
 * Product B
 */
abstract class DirectoryOperator{
	abstract void CreateDirectory(String path);
}

class WindowsDirectoryOperator extends DirectoryOperator{

	@Override
	void CreateDirectory(String path) {
		System.out.println("create directory in windows.");
	}
	
}

class UnixDirectoryOperator extends DirectoryOperator{

	@Override
	void CreateDirectory(String path) {
		System.out.println("create directory in unix/linux.");
	}
	
}

/*
 * Abstract Factory
 */
abstract class IOOperatorFactory{
	
	abstract FileOperator CreateFileOperator();

	abstract DirectoryOperator CreateDirectoryOperator();
}




